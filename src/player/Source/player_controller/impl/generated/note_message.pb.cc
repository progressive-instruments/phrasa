// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: note_message.proto

#include "note_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace shift_processor {
constexpr ShiftPlayerMessage::ShiftPlayerMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ShiftPlayerMessageDefaultTypeInternal {
  constexpr ShiftPlayerMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShiftPlayerMessageDefaultTypeInternal() {}
  union {
    ShiftPlayerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShiftPlayerMessageDefaultTypeInternal _ShiftPlayerMessage_default_instance_;
constexpr ShiftPlayerResponse::ShiftPlayerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , _oneof_case_{}{}
struct ShiftPlayerResponseDefaultTypeInternal {
  constexpr ShiftPlayerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShiftPlayerResponseDefaultTypeInternal() {}
  union {
    ShiftPlayerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShiftPlayerResponseDefaultTypeInternal _ShiftPlayerResponse_default_instance_;
constexpr EmptyMessage::EmptyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EmptyMessageDefaultTypeInternal {
  constexpr EmptyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyMessageDefaultTypeInternal() {}
  union {
    EmptyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyMessageDefaultTypeInternal _EmptyMessage_default_instance_;
constexpr GetStatusData::GetStatusData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : currentposition_(nullptr){}
struct GetStatusDataDefaultTypeInternal {
  constexpr GetStatusDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetStatusDataDefaultTypeInternal() {}
  union {
    GetStatusData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetStatusDataDefaultTypeInternal _GetStatusData_default_instance_;
constexpr SequencePosition::SequencePosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : endtimems_(0)
  , currenttimems_(0){}
struct SequencePositionDefaultTypeInternal {
  constexpr SequencePositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SequencePositionDefaultTypeInternal() {}
  union {
    SequencePosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SequencePositionDefaultTypeInternal _SequencePosition_default_instance_;
constexpr SetPlayMode::SetPlayMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playmode_(0)
{}
struct SetPlayModeDefaultTypeInternal {
  constexpr SetPlayModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPlayModeDefaultTypeInternal() {}
  union {
    SetPlayMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPlayModeDefaultTypeInternal _SetPlayMode_default_instance_;
constexpr SetSequenceMessage::SetSequenceMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instrumentevents_()
  , sequencelength_(0){}
struct SetSequenceMessageDefaultTypeInternal {
  constexpr SetSequenceMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetSequenceMessageDefaultTypeInternal() {}
  union {
    SetSequenceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetSequenceMessageDefaultTypeInternal _SetSequenceMessage_default_instance_;
constexpr InstrumentEvents::InstrumentEvents(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , instrument_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InstrumentEventsDefaultTypeInternal {
  constexpr InstrumentEventsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstrumentEventsDefaultTypeInternal() {}
  union {
    InstrumentEvents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstrumentEventsDefaultTypeInternal _InstrumentEvents_default_instance_;
constexpr SequenceEvent_ValuesEntry_DoNotUse::SequenceEvent_ValuesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SequenceEvent_ValuesEntry_DoNotUseDefaultTypeInternal {
  constexpr SequenceEvent_ValuesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SequenceEvent_ValuesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SequenceEvent_ValuesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SequenceEvent_ValuesEntry_DoNotUseDefaultTypeInternal _SequenceEvent_ValuesEntry_DoNotUse_default_instance_;
constexpr SequenceEvent::SequenceEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , eventtime_(0)
  , duration_(0){}
struct SequenceEventDefaultTypeInternal {
  constexpr SequenceEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SequenceEventDefaultTypeInternal() {}
  union {
    SequenceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SequenceEventDefaultTypeInternal _SequenceEvent_default_instance_;
constexpr EventValue::EventValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct EventValueDefaultTypeInternal {
  constexpr EventValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventValueDefaultTypeInternal() {}
  union {
    EventValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventValueDefaultTypeInternal _EventValue_default_instance_;
constexpr RangedValue::RangedValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : startvalue_(0)
  , endvalue_(0)
  , curve_(0){}
struct RangedValueDefaultTypeInternal {
  constexpr RangedValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangedValueDefaultTypeInternal() {}
  union {
    RangedValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangedValueDefaultTypeInternal _RangedValue_default_instance_;
}  // namespace shift_processor
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_note_5fmessage_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_note_5fmessage_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_note_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_note_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::ShiftPlayerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::shift_processor::ShiftPlayerMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::shift_processor::ShiftPlayerMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::ShiftPlayerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::shift_processor::ShiftPlayerResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shift_processor::ShiftPlayerResponse, status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::shift_processor::ShiftPlayerResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::EmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::GetStatusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shift_processor::GetStatusData, currentposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequencePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequencePosition, endtimems_),
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequencePosition, currenttimems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::SetPlayMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shift_processor::SetPlayMode, playmode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::SetSequenceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shift_processor::SetSequenceMessage, sequencelength_),
  PROTOBUF_FIELD_OFFSET(::shift_processor::SetSequenceMessage, instrumentevents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::InstrumentEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shift_processor::InstrumentEvents, instrument_),
  PROTOBUF_FIELD_OFFSET(::shift_processor::InstrumentEvents, events_),
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequenceEvent_ValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequenceEvent_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequenceEvent_ValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequenceEvent_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequenceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequenceEvent, eventtime_),
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequenceEvent, duration_),
  PROTOBUF_FIELD_OFFSET(::shift_processor::SequenceEvent, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::EventValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::shift_processor::EventValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::shift_processor::EventValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shift_processor::RangedValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shift_processor::RangedValue, startvalue_),
  PROTOBUF_FIELD_OFFSET(::shift_processor::RangedValue, endvalue_),
  PROTOBUF_FIELD_OFFSET(::shift_processor::RangedValue, curve_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::shift_processor::ShiftPlayerMessage)},
  { 9, -1, sizeof(::shift_processor::ShiftPlayerResponse)},
  { 18, -1, sizeof(::shift_processor::EmptyMessage)},
  { 23, -1, sizeof(::shift_processor::GetStatusData)},
  { 29, -1, sizeof(::shift_processor::SequencePosition)},
  { 36, -1, sizeof(::shift_processor::SetPlayMode)},
  { 42, -1, sizeof(::shift_processor::SetSequenceMessage)},
  { 49, -1, sizeof(::shift_processor::InstrumentEvents)},
  { 56, 63, sizeof(::shift_processor::SequenceEvent_ValuesEntry_DoNotUse)},
  { 65, -1, sizeof(::shift_processor::SequenceEvent)},
  { 73, -1, sizeof(::shift_processor::EventValue)},
  { 82, -1, sizeof(::shift_processor::RangedValue)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_ShiftPlayerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_ShiftPlayerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_EmptyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_GetStatusData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_SequencePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_SetPlayMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_SetSequenceMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_InstrumentEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_SequenceEvent_ValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_SequenceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_EventValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shift_processor::_RangedValue_default_instance_),
};

const char descriptor_table_protodef_note_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022note_message.proto\022\017shift_processor\"\311\001"
  "\n\022ShiftPlayerMessage\022:\n\013setSequence\030\001 \001("
  "\0132#.shift_processor.SetSequenceMessageH\000"
  "\0223\n\013setPlayMode\030\002 \001(\0132\034.shift_processor."
  "SetPlayModeH\000\0227\n\016getPlayerState\030\003 \001(\0132\035."
  "shift_processor.EmptyMessageH\000B\t\n\007messag"
  "e\"\266\001\n\023ShiftPlayerResponse\022/\n\006status\030\001 \001("
  "\0162\037.shift_processor.ResponseStatus\022-\n\004no"
  "ne\030\002 \001(\0132\035.shift_processor.EmptyMessageH"
  "\000\0227\n\rgetStatusData\030\003 \001(\0132\036.shift_process"
  "or.GetStatusDataH\000B\006\n\004data\"\016\n\014EmptyMessa"
  "ge\"K\n\rGetStatusData\022:\n\017currentPosition\030\001"
  " \001(\0132!.shift_processor.SequencePosition\""
  "<\n\020SequencePosition\022\021\n\tendTimeMs\030\001 \001(\001\022\025"
  "\n\rcurrentTimeMs\030\002 \001(\001\":\n\013SetPlayMode\022+\n\010"
  "playMode\030\001 \001(\0162\031.shift_processor.PlayMod"
  "e\"i\n\022SetSequenceMessage\022\026\n\016sequenceLengt"
  "h\030\001 \001(\001\022;\n\020instrumentEvents\030\002 \003(\0132!.shif"
  "t_processor.InstrumentEvents\"V\n\020Instrume"
  "ntEvents\022\022\n\ninstrument\030\001 \001(\t\022.\n\006events\030\002"
  " \003(\0132\036.shift_processor.SequenceEvent\"\274\001\n"
  "\rSequenceEvent\022\021\n\teventTime\030\001 \001(\001\022\020\n\010dur"
  "ation\030\002 \001(\001\022:\n\006values\030\003 \003(\0132*.shift_proc"
  "essor.SequenceEvent.ValuesEntry\032J\n\013Value"
  "sEntry\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.shi"
  "ft_processor.EventValue:\0028\001\"y\n\nEventValu"
  "e\022\026\n\014numericValue\030\001 \001(\001H\000\022\025\n\013stringValue"
  "\030\002 \001(\tH\000\0223\n\013rangedValue\030\003 \001(\0132\034.shift_pr"
  "ocessor.RangedValueH\000B\007\n\005value\"B\n\013Ranged"
  "Value\022\022\n\nstartValue\030\001 \001(\001\022\020\n\010endValue\030\002 "
  "\001(\001\022\r\n\005curve\030\003 \001(\001*N\n\016ResponseStatus\022\006\n\002"
  "Ok\020\000\022\020\n\014GeneralError\020\001\022\020\n\014ParsingError\020\002"
  "\022\020\n\014InvalidInput\020\003*)\n\010PlayMode\022\010\n\004Play\020\000"
  "\022\010\n\004Stop\020\001\022\t\n\005Pause\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_note_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_note_5fmessage_2eproto = {
  false, false, 1349, descriptor_table_protodef_note_5fmessage_2eproto, "note_message.proto", 
  &descriptor_table_note_5fmessage_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_note_5fmessage_2eproto::offsets,
  file_level_metadata_note_5fmessage_2eproto, file_level_enum_descriptors_note_5fmessage_2eproto, file_level_service_descriptors_note_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_note_5fmessage_2eproto_getter() {
  return &descriptor_table_note_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_note_5fmessage_2eproto(&descriptor_table_note_5fmessage_2eproto);
namespace shift_processor {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_note_5fmessage_2eproto);
  return file_level_enum_descriptors_note_5fmessage_2eproto[0];
}
bool ResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_note_5fmessage_2eproto);
  return file_level_enum_descriptors_note_5fmessage_2eproto[1];
}
bool PlayMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ShiftPlayerMessage::_Internal {
 public:
  static const ::shift_processor::SetSequenceMessage& setsequence(const ShiftPlayerMessage* msg);
  static const ::shift_processor::SetPlayMode& setplaymode(const ShiftPlayerMessage* msg);
  static const ::shift_processor::EmptyMessage& getplayerstate(const ShiftPlayerMessage* msg);
};

const ::shift_processor::SetSequenceMessage&
ShiftPlayerMessage::_Internal::setsequence(const ShiftPlayerMessage* msg) {
  return *msg->message_.setsequence_;
}
const ::shift_processor::SetPlayMode&
ShiftPlayerMessage::_Internal::setplaymode(const ShiftPlayerMessage* msg) {
  return *msg->message_.setplaymode_;
}
const ::shift_processor::EmptyMessage&
ShiftPlayerMessage::_Internal::getplayerstate(const ShiftPlayerMessage* msg) {
  return *msg->message_.getplayerstate_;
}
void ShiftPlayerMessage::set_allocated_setsequence(::shift_processor::SetSequenceMessage* setsequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (setsequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::shift_processor::SetSequenceMessage>::GetOwningArena(setsequence);
    if (message_arena != submessage_arena) {
      setsequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setsequence, submessage_arena);
    }
    set_has_setsequence();
    message_.setsequence_ = setsequence;
  }
  // @@protoc_insertion_point(field_set_allocated:shift_processor.ShiftPlayerMessage.setSequence)
}
void ShiftPlayerMessage::set_allocated_setplaymode(::shift_processor::SetPlayMode* setplaymode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (setplaymode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::shift_processor::SetPlayMode>::GetOwningArena(setplaymode);
    if (message_arena != submessage_arena) {
      setplaymode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setplaymode, submessage_arena);
    }
    set_has_setplaymode();
    message_.setplaymode_ = setplaymode;
  }
  // @@protoc_insertion_point(field_set_allocated:shift_processor.ShiftPlayerMessage.setPlayMode)
}
void ShiftPlayerMessage::set_allocated_getplayerstate(::shift_processor::EmptyMessage* getplayerstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (getplayerstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::shift_processor::EmptyMessage>::GetOwningArena(getplayerstate);
    if (message_arena != submessage_arena) {
      getplayerstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getplayerstate, submessage_arena);
    }
    set_has_getplayerstate();
    message_.getplayerstate_ = getplayerstate;
  }
  // @@protoc_insertion_point(field_set_allocated:shift_processor.ShiftPlayerMessage.getPlayerState)
}
ShiftPlayerMessage::ShiftPlayerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.ShiftPlayerMessage)
}
ShiftPlayerMessage::ShiftPlayerMessage(const ShiftPlayerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kSetSequence: {
      _internal_mutable_setsequence()->::shift_processor::SetSequenceMessage::MergeFrom(from._internal_setsequence());
      break;
    }
    case kSetPlayMode: {
      _internal_mutable_setplaymode()->::shift_processor::SetPlayMode::MergeFrom(from._internal_setplaymode());
      break;
    }
    case kGetPlayerState: {
      _internal_mutable_getplayerstate()->::shift_processor::EmptyMessage::MergeFrom(from._internal_getplayerstate());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:shift_processor.ShiftPlayerMessage)
}

inline void ShiftPlayerMessage::SharedCtor() {
clear_has_message();
}

ShiftPlayerMessage::~ShiftPlayerMessage() {
  // @@protoc_insertion_point(destructor:shift_processor.ShiftPlayerMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShiftPlayerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void ShiftPlayerMessage::ArenaDtor(void* object) {
  ShiftPlayerMessage* _this = reinterpret_cast< ShiftPlayerMessage* >(object);
  (void)_this;
}
void ShiftPlayerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShiftPlayerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShiftPlayerMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:shift_processor.ShiftPlayerMessage)
  switch (message_case()) {
    case kSetSequence: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.setsequence_;
      }
      break;
    }
    case kSetPlayMode: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.setplaymode_;
      }
      break;
    }
    case kGetPlayerState: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.getplayerstate_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ShiftPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.ShiftPlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShiftPlayerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .shift_processor.SetSequenceMessage setSequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_setsequence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .shift_processor.SetPlayMode setPlayMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_setplaymode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .shift_processor.EmptyMessage getPlayerState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getplayerstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShiftPlayerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.ShiftPlayerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shift_processor.SetSequenceMessage setSequence = 1;
  if (_internal_has_setsequence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::setsequence(this), target, stream);
  }

  // .shift_processor.SetPlayMode setPlayMode = 2;
  if (_internal_has_setplaymode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::setplaymode(this), target, stream);
  }

  // .shift_processor.EmptyMessage getPlayerState = 3;
  if (_internal_has_getplayerstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::getplayerstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.ShiftPlayerMessage)
  return target;
}

size_t ShiftPlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.ShiftPlayerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .shift_processor.SetSequenceMessage setSequence = 1;
    case kSetSequence: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.setsequence_);
      break;
    }
    // .shift_processor.SetPlayMode setPlayMode = 2;
    case kSetPlayMode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.setplaymode_);
      break;
    }
    // .shift_processor.EmptyMessage getPlayerState = 3;
    case kGetPlayerState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.getplayerstate_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShiftPlayerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShiftPlayerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShiftPlayerMessage::GetClassData() const { return &_class_data_; }

void ShiftPlayerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShiftPlayerMessage *>(to)->MergeFrom(
      static_cast<const ShiftPlayerMessage &>(from));
}


void ShiftPlayerMessage::MergeFrom(const ShiftPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.ShiftPlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kSetSequence: {
      _internal_mutable_setsequence()->::shift_processor::SetSequenceMessage::MergeFrom(from._internal_setsequence());
      break;
    }
    case kSetPlayMode: {
      _internal_mutable_setplaymode()->::shift_processor::SetPlayMode::MergeFrom(from._internal_setplaymode());
      break;
    }
    case kGetPlayerState: {
      _internal_mutable_getplayerstate()->::shift_processor::EmptyMessage::MergeFrom(from._internal_getplayerstate());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShiftPlayerMessage::CopyFrom(const ShiftPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.ShiftPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftPlayerMessage::IsInitialized() const {
  return true;
}

void ShiftPlayerMessage::InternalSwap(ShiftPlayerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShiftPlayerMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[0]);
}

// ===================================================================

class ShiftPlayerResponse::_Internal {
 public:
  static const ::shift_processor::EmptyMessage& none(const ShiftPlayerResponse* msg);
  static const ::shift_processor::GetStatusData& getstatusdata(const ShiftPlayerResponse* msg);
};

const ::shift_processor::EmptyMessage&
ShiftPlayerResponse::_Internal::none(const ShiftPlayerResponse* msg) {
  return *msg->data_.none_;
}
const ::shift_processor::GetStatusData&
ShiftPlayerResponse::_Internal::getstatusdata(const ShiftPlayerResponse* msg) {
  return *msg->data_.getstatusdata_;
}
void ShiftPlayerResponse::set_allocated_none(::shift_processor::EmptyMessage* none) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (none) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::shift_processor::EmptyMessage>::GetOwningArena(none);
    if (message_arena != submessage_arena) {
      none = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, none, submessage_arena);
    }
    set_has_none();
    data_.none_ = none;
  }
  // @@protoc_insertion_point(field_set_allocated:shift_processor.ShiftPlayerResponse.none)
}
void ShiftPlayerResponse::set_allocated_getstatusdata(::shift_processor::GetStatusData* getstatusdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (getstatusdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::shift_processor::GetStatusData>::GetOwningArena(getstatusdata);
    if (message_arena != submessage_arena) {
      getstatusdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getstatusdata, submessage_arena);
    }
    set_has_getstatusdata();
    data_.getstatusdata_ = getstatusdata;
  }
  // @@protoc_insertion_point(field_set_allocated:shift_processor.ShiftPlayerResponse.getStatusData)
}
ShiftPlayerResponse::ShiftPlayerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.ShiftPlayerResponse)
}
ShiftPlayerResponse::ShiftPlayerResponse(const ShiftPlayerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  clear_has_data();
  switch (from.data_case()) {
    case kNone: {
      _internal_mutable_none()->::shift_processor::EmptyMessage::MergeFrom(from._internal_none());
      break;
    }
    case kGetStatusData: {
      _internal_mutable_getstatusdata()->::shift_processor::GetStatusData::MergeFrom(from._internal_getstatusdata());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:shift_processor.ShiftPlayerResponse)
}

inline void ShiftPlayerResponse::SharedCtor() {
status_ = 0;
clear_has_data();
}

ShiftPlayerResponse::~ShiftPlayerResponse() {
  // @@protoc_insertion_point(destructor:shift_processor.ShiftPlayerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShiftPlayerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void ShiftPlayerResponse::ArenaDtor(void* object) {
  ShiftPlayerResponse* _this = reinterpret_cast< ShiftPlayerResponse* >(object);
  (void)_this;
}
void ShiftPlayerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShiftPlayerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShiftPlayerResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:shift_processor.ShiftPlayerResponse)
  switch (data_case()) {
    case kNone: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.none_;
      }
      break;
    }
    case kGetStatusData: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.getstatusdata_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void ShiftPlayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.ShiftPlayerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShiftPlayerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .shift_processor.ResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::shift_processor::ResponseStatus>(val));
        } else goto handle_unusual;
        continue;
      // .shift_processor.EmptyMessage none = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_none(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .shift_processor.GetStatusData getStatusData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getstatusdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShiftPlayerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.ShiftPlayerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shift_processor.ResponseStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .shift_processor.EmptyMessage none = 2;
  if (_internal_has_none()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::none(this), target, stream);
  }

  // .shift_processor.GetStatusData getStatusData = 3;
  if (_internal_has_getstatusdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::getstatusdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.ShiftPlayerResponse)
  return target;
}

size_t ShiftPlayerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.ShiftPlayerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shift_processor.ResponseStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  switch (data_case()) {
    // .shift_processor.EmptyMessage none = 2;
    case kNone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.none_);
      break;
    }
    // .shift_processor.GetStatusData getStatusData = 3;
    case kGetStatusData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.getstatusdata_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShiftPlayerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShiftPlayerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShiftPlayerResponse::GetClassData() const { return &_class_data_; }

void ShiftPlayerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ShiftPlayerResponse *>(to)->MergeFrom(
      static_cast<const ShiftPlayerResponse &>(from));
}


void ShiftPlayerResponse::MergeFrom(const ShiftPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.ShiftPlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  switch (from.data_case()) {
    case kNone: {
      _internal_mutable_none()->::shift_processor::EmptyMessage::MergeFrom(from._internal_none());
      break;
    }
    case kGetStatusData: {
      _internal_mutable_getstatusdata()->::shift_processor::GetStatusData::MergeFrom(from._internal_getstatusdata());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShiftPlayerResponse::CopyFrom(const ShiftPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.ShiftPlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftPlayerResponse::IsInitialized() const {
  return true;
}

void ShiftPlayerResponse::InternalSwap(ShiftPlayerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShiftPlayerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[1]);
}

// ===================================================================

class EmptyMessage::_Internal {
 public:
};

EmptyMessage::EmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.EmptyMessage)
}
EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:shift_processor.EmptyMessage)
}

inline void EmptyMessage::SharedCtor() {
}

EmptyMessage::~EmptyMessage() {
  // @@protoc_insertion_point(destructor:shift_processor.EmptyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EmptyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EmptyMessage::ArenaDtor(void* object) {
  EmptyMessage* _this = reinterpret_cast< EmptyMessage* >(object);
  (void)_this;
}
void EmptyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.EmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.EmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.EmptyMessage)
  return target;
}

size_t EmptyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.EmptyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EmptyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyMessage::GetClassData() const { return &_class_data_; }

void EmptyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EmptyMessage *>(to)->MergeFrom(
      static_cast<const EmptyMessage &>(from));
}


void EmptyMessage::MergeFrom(const EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.EmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.EmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {
  return true;
}

void EmptyMessage::InternalSwap(EmptyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[2]);
}

// ===================================================================

class GetStatusData::_Internal {
 public:
  static const ::shift_processor::SequencePosition& currentposition(const GetStatusData* msg);
};

const ::shift_processor::SequencePosition&
GetStatusData::_Internal::currentposition(const GetStatusData* msg) {
  return *msg->currentposition_;
}
GetStatusData::GetStatusData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.GetStatusData)
}
GetStatusData::GetStatusData(const GetStatusData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_currentposition()) {
    currentposition_ = new ::shift_processor::SequencePosition(*from.currentposition_);
  } else {
    currentposition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:shift_processor.GetStatusData)
}

inline void GetStatusData::SharedCtor() {
currentposition_ = nullptr;
}

GetStatusData::~GetStatusData() {
  // @@protoc_insertion_point(destructor:shift_processor.GetStatusData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetStatusData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete currentposition_;
}

void GetStatusData::ArenaDtor(void* object) {
  GetStatusData* _this = reinterpret_cast< GetStatusData* >(object);
  (void)_this;
}
void GetStatusData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetStatusData::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.GetStatusData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && currentposition_ != nullptr) {
    delete currentposition_;
  }
  currentposition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .shift_processor.SequencePosition currentPosition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.GetStatusData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shift_processor.SequencePosition currentPosition = 1;
  if (this->_internal_has_currentposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::currentposition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.GetStatusData)
  return target;
}

size_t GetStatusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.GetStatusData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shift_processor.SequencePosition currentPosition = 1;
  if (this->_internal_has_currentposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currentposition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatusData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetStatusData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatusData::GetClassData() const { return &_class_data_; }

void GetStatusData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetStatusData *>(to)->MergeFrom(
      static_cast<const GetStatusData &>(from));
}


void GetStatusData::MergeFrom(const GetStatusData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.GetStatusData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_currentposition()) {
    _internal_mutable_currentposition()->::shift_processor::SequencePosition::MergeFrom(from._internal_currentposition());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatusData::CopyFrom(const GetStatusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.GetStatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusData::IsInitialized() const {
  return true;
}

void GetStatusData::InternalSwap(GetStatusData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(currentposition_, other->currentposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[3]);
}

// ===================================================================

class SequencePosition::_Internal {
 public:
};

SequencePosition::SequencePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.SequencePosition)
}
SequencePosition::SequencePosition(const SequencePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&endtimems_, &from.endtimems_,
    static_cast<size_t>(reinterpret_cast<char*>(&currenttimems_) -
    reinterpret_cast<char*>(&endtimems_)) + sizeof(currenttimems_));
  // @@protoc_insertion_point(copy_constructor:shift_processor.SequencePosition)
}

inline void SequencePosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&endtimems_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currenttimems_) -
    reinterpret_cast<char*>(&endtimems_)) + sizeof(currenttimems_));
}

SequencePosition::~SequencePosition() {
  // @@protoc_insertion_point(destructor:shift_processor.SequencePosition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SequencePosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SequencePosition::ArenaDtor(void* object) {
  SequencePosition* _this = reinterpret_cast< SequencePosition* >(object);
  (void)_this;
}
void SequencePosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SequencePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SequencePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.SequencePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&endtimems_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currenttimems_) -
      reinterpret_cast<char*>(&endtimems_)) + sizeof(currenttimems_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SequencePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double endTimeMs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          endtimems_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double currentTimeMs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          currenttimems_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SequencePosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.SequencePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double endTimeMs = 1;
  if (!(this->_internal_endtimems() <= 0 && this->_internal_endtimems() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_endtimems(), target);
  }

  // double currentTimeMs = 2;
  if (!(this->_internal_currenttimems() <= 0 && this->_internal_currenttimems() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_currenttimems(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.SequencePosition)
  return target;
}

size_t SequencePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.SequencePosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double endTimeMs = 1;
  if (!(this->_internal_endtimems() <= 0 && this->_internal_endtimems() >= 0)) {
    total_size += 1 + 8;
  }

  // double currentTimeMs = 2;
  if (!(this->_internal_currenttimems() <= 0 && this->_internal_currenttimems() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SequencePosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SequencePosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SequencePosition::GetClassData() const { return &_class_data_; }

void SequencePosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SequencePosition *>(to)->MergeFrom(
      static_cast<const SequencePosition &>(from));
}


void SequencePosition::MergeFrom(const SequencePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.SequencePosition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_endtimems() <= 0 && from._internal_endtimems() >= 0)) {
    _internal_set_endtimems(from._internal_endtimems());
  }
  if (!(from._internal_currenttimems() <= 0 && from._internal_currenttimems() >= 0)) {
    _internal_set_currenttimems(from._internal_currenttimems());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SequencePosition::CopyFrom(const SequencePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.SequencePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequencePosition::IsInitialized() const {
  return true;
}

void SequencePosition::InternalSwap(SequencePosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SequencePosition, currenttimems_)
      + sizeof(SequencePosition::currenttimems_)
      - PROTOBUF_FIELD_OFFSET(SequencePosition, endtimems_)>(
          reinterpret_cast<char*>(&endtimems_),
          reinterpret_cast<char*>(&other->endtimems_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SequencePosition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[4]);
}

// ===================================================================

class SetPlayMode::_Internal {
 public:
};

SetPlayMode::SetPlayMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.SetPlayMode)
}
SetPlayMode::SetPlayMode(const SetPlayMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playmode_ = from.playmode_;
  // @@protoc_insertion_point(copy_constructor:shift_processor.SetPlayMode)
}

inline void SetPlayMode::SharedCtor() {
playmode_ = 0;
}

SetPlayMode::~SetPlayMode() {
  // @@protoc_insertion_point(destructor:shift_processor.SetPlayMode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetPlayMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetPlayMode::ArenaDtor(void* object) {
  SetPlayMode* _this = reinterpret_cast< SetPlayMode* >(object);
  (void)_this;
}
void SetPlayMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPlayMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPlayMode::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.SetPlayMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playmode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPlayMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .shift_processor.PlayMode playMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playmode(static_cast<::shift_processor::PlayMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPlayMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.SetPlayMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .shift_processor.PlayMode playMode = 1;
  if (this->_internal_playmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_playmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.SetPlayMode)
  return target;
}

size_t SetPlayMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.SetPlayMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .shift_processor.PlayMode playMode = 1;
  if (this->_internal_playmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPlayMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetPlayMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPlayMode::GetClassData() const { return &_class_data_; }

void SetPlayMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetPlayMode *>(to)->MergeFrom(
      static_cast<const SetPlayMode &>(from));
}


void SetPlayMode::MergeFrom(const SetPlayMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.SetPlayMode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playmode() != 0) {
    _internal_set_playmode(from._internal_playmode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPlayMode::CopyFrom(const SetPlayMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.SetPlayMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlayMode::IsInitialized() const {
  return true;
}

void SetPlayMode::InternalSwap(SetPlayMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(playmode_, other->playmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPlayMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[5]);
}

// ===================================================================

class SetSequenceMessage::_Internal {
 public:
};

SetSequenceMessage::SetSequenceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  instrumentevents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.SetSequenceMessage)
}
SetSequenceMessage::SetSequenceMessage(const SetSequenceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instrumentevents_(from.instrumentevents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequencelength_ = from.sequencelength_;
  // @@protoc_insertion_point(copy_constructor:shift_processor.SetSequenceMessage)
}

inline void SetSequenceMessage::SharedCtor() {
sequencelength_ = 0;
}

SetSequenceMessage::~SetSequenceMessage() {
  // @@protoc_insertion_point(destructor:shift_processor.SetSequenceMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetSequenceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSequenceMessage::ArenaDtor(void* object) {
  SetSequenceMessage* _this = reinterpret_cast< SetSequenceMessage* >(object);
  (void)_this;
}
void SetSequenceMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetSequenceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetSequenceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.SetSequenceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumentevents_.Clear();
  sequencelength_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSequenceMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double sequenceLength = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          sequencelength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .shift_processor.InstrumentEvents instrumentEvents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrumentevents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSequenceMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.SetSequenceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double sequenceLength = 1;
  if (!(this->_internal_sequencelength() <= 0 && this->_internal_sequencelength() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sequencelength(), target);
  }

  // repeated .shift_processor.InstrumentEvents instrumentEvents = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrumentevents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_instrumentevents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.SetSequenceMessage)
  return target;
}

size_t SetSequenceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.SetSequenceMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shift_processor.InstrumentEvents instrumentEvents = 2;
  total_size += 1UL * this->_internal_instrumentevents_size();
  for (const auto& msg : this->instrumentevents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double sequenceLength = 1;
  if (!(this->_internal_sequencelength() <= 0 && this->_internal_sequencelength() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetSequenceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetSequenceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetSequenceMessage::GetClassData() const { return &_class_data_; }

void SetSequenceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetSequenceMessage *>(to)->MergeFrom(
      static_cast<const SetSequenceMessage &>(from));
}


void SetSequenceMessage::MergeFrom(const SetSequenceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.SetSequenceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrumentevents_.MergeFrom(from.instrumentevents_);
  if (!(from._internal_sequencelength() <= 0 && from._internal_sequencelength() >= 0)) {
    _internal_set_sequencelength(from._internal_sequencelength());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetSequenceMessage::CopyFrom(const SetSequenceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.SetSequenceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSequenceMessage::IsInitialized() const {
  return true;
}

void SetSequenceMessage::InternalSwap(SetSequenceMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  instrumentevents_.InternalSwap(&other->instrumentevents_);
  swap(sequencelength_, other->sequencelength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSequenceMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[6]);
}

// ===================================================================

class InstrumentEvents::_Internal {
 public:
};

InstrumentEvents::InstrumentEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.InstrumentEvents)
}
InstrumentEvents::InstrumentEvents(const InstrumentEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrument_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument().empty()) {
    instrument_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instrument(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:shift_processor.InstrumentEvents)
}

inline void InstrumentEvents::SharedCtor() {
instrument_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InstrumentEvents::~InstrumentEvents() {
  // @@protoc_insertion_point(destructor:shift_processor.InstrumentEvents)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstrumentEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  instrument_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentEvents::ArenaDtor(void* object) {
  InstrumentEvents* _this = reinterpret_cast< InstrumentEvents* >(object);
  (void)_this;
}
void InstrumentEvents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstrumentEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.InstrumentEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  instrument_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrument();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shift_processor.InstrumentEvents.instrument"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .shift_processor.SequenceEvent events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentEvents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.InstrumentEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrument = 1;
  if (!this->_internal_instrument().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument().data(), static_cast<int>(this->_internal_instrument().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shift_processor.InstrumentEvents.instrument");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrument(), target);
  }

  // repeated .shift_processor.SequenceEvent events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.InstrumentEvents)
  return target;
}

size_t InstrumentEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.InstrumentEvents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shift_processor.SequenceEvent events = 2;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string instrument = 1;
  if (!this->_internal_instrument().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentEvents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstrumentEvents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentEvents::GetClassData() const { return &_class_data_; }

void InstrumentEvents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InstrumentEvents *>(to)->MergeFrom(
      static_cast<const InstrumentEvents &>(from));
}


void InstrumentEvents::MergeFrom(const InstrumentEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.InstrumentEvents)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_instrument().empty()) {
    _internal_set_instrument(from._internal_instrument());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentEvents::CopyFrom(const InstrumentEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.InstrumentEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentEvents::IsInitialized() const {
  return true;
}

void InstrumentEvents::InternalSwap(InstrumentEvents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instrument_, GetArenaForAllocation(),
      &other->instrument_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentEvents::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[7]);
}

// ===================================================================

SequenceEvent_ValuesEntry_DoNotUse::SequenceEvent_ValuesEntry_DoNotUse() {}
SequenceEvent_ValuesEntry_DoNotUse::SequenceEvent_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SequenceEvent_ValuesEntry_DoNotUse::MergeFrom(const SequenceEvent_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SequenceEvent_ValuesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[8]);
}

// ===================================================================

class SequenceEvent::_Internal {
 public:
};

SequenceEvent::SequenceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.SequenceEvent)
}
SequenceEvent::SequenceEvent(const SequenceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  ::memcpy(&eventtime_, &from.eventtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&eventtime_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:shift_processor.SequenceEvent)
}

inline void SequenceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&eventtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&eventtime_)) + sizeof(duration_));
}

SequenceEvent::~SequenceEvent() {
  // @@protoc_insertion_point(destructor:shift_processor.SequenceEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SequenceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SequenceEvent::ArenaDtor(void* object) {
  SequenceEvent* _this = reinterpret_cast< SequenceEvent* >(object);
  (void)_this;
  _this->values_. ~MapField();
}
inline void SequenceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SequenceEvent::ArenaDtor);
  }
}
void SequenceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SequenceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.SequenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  ::memset(&eventtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&eventtime_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SequenceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double eventTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          eventtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<string, .shift_processor.EventValue> values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SequenceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.SequenceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double eventTime = 1;
  if (!(this->_internal_eventtime() <= 0 && this->_internal_eventtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_eventtime(), target);
  }

  // double duration = 2;
  if (!(this->_internal_duration() <= 0 && this->_internal_duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_duration(), target);
  }

  // map<string, .shift_processor.EventValue> values = 3;
  if (!this->_internal_values().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::shift_processor::EventValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "shift_processor.SequenceEvent.ValuesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_values().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::shift_processor::EventValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::shift_processor::EventValue >::const_iterator
          it = this->_internal_values().begin();
          it != this->_internal_values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SequenceEvent_ValuesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::shift_processor::EventValue >::const_iterator
          it = this->_internal_values().begin();
          it != this->_internal_values().end(); ++it) {
        target = SequenceEvent_ValuesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.SequenceEvent)
  return target;
}

size_t SequenceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.SequenceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .shift_processor.EventValue> values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::shift_processor::EventValue >::const_iterator
      it = this->_internal_values().begin();
      it != this->_internal_values().end(); ++it) {
    total_size += SequenceEvent_ValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // double eventTime = 1;
  if (!(this->_internal_eventtime() <= 0 && this->_internal_eventtime() >= 0)) {
    total_size += 1 + 8;
  }

  // double duration = 2;
  if (!(this->_internal_duration() <= 0 && this->_internal_duration() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SequenceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SequenceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SequenceEvent::GetClassData() const { return &_class_data_; }

void SequenceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SequenceEvent *>(to)->MergeFrom(
      static_cast<const SequenceEvent &>(from));
}


void SequenceEvent::MergeFrom(const SequenceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.SequenceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (!(from._internal_eventtime() <= 0 && from._internal_eventtime() >= 0)) {
    _internal_set_eventtime(from._internal_eventtime());
  }
  if (!(from._internal_duration() <= 0 && from._internal_duration() >= 0)) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SequenceEvent::CopyFrom(const SequenceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.SequenceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceEvent::IsInitialized() const {
  return true;
}

void SequenceEvent::InternalSwap(SequenceEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SequenceEvent, duration_)
      + sizeof(SequenceEvent::duration_)
      - PROTOBUF_FIELD_OFFSET(SequenceEvent, eventtime_)>(
          reinterpret_cast<char*>(&eventtime_),
          reinterpret_cast<char*>(&other->eventtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SequenceEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[9]);
}

// ===================================================================

class EventValue::_Internal {
 public:
  static const ::shift_processor::RangedValue& rangedvalue(const EventValue* msg);
};

const ::shift_processor::RangedValue&
EventValue::_Internal::rangedvalue(const EventValue* msg) {
  return *msg->value_.rangedvalue_;
}
void EventValue::set_allocated_rangedvalue(::shift_processor::RangedValue* rangedvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (rangedvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::shift_processor::RangedValue>::GetOwningArena(rangedvalue);
    if (message_arena != submessage_arena) {
      rangedvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rangedvalue, submessage_arena);
    }
    set_has_rangedvalue();
    value_.rangedvalue_ = rangedvalue;
  }
  // @@protoc_insertion_point(field_set_allocated:shift_processor.EventValue.rangedValue)
}
EventValue::EventValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.EventValue)
}
EventValue::EventValue(const EventValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kNumericValue: {
      _internal_set_numericvalue(from._internal_numericvalue());
      break;
    }
    case kStringValue: {
      _internal_set_stringvalue(from._internal_stringvalue());
      break;
    }
    case kRangedValue: {
      _internal_mutable_rangedvalue()->::shift_processor::RangedValue::MergeFrom(from._internal_rangedvalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:shift_processor.EventValue)
}

inline void EventValue::SharedCtor() {
clear_has_value();
}

EventValue::~EventValue() {
  // @@protoc_insertion_point(destructor:shift_processor.EventValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void EventValue::ArenaDtor(void* object) {
  EventValue* _this = reinterpret_cast< EventValue* >(object);
  (void)_this;
}
void EventValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:shift_processor.EventValue)
  switch (value_case()) {
    case kNumericValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.stringvalue_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kRangedValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.rangedvalue_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void EventValue::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.EventValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double numericValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _internal_set_numericvalue(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string stringValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shift_processor.EventValue.stringValue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .shift_processor.RangedValue rangedValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rangedvalue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.EventValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double numericValue = 1;
  if (_internal_has_numericvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_numericvalue(), target);
  }

  // string stringValue = 2;
  if (_internal_has_stringvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shift_processor.EventValue.stringValue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stringvalue(), target);
  }

  // .shift_processor.RangedValue rangedValue = 3;
  if (_internal_has_rangedvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rangedvalue(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.EventValue)
  return target;
}

size_t EventValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.EventValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // double numericValue = 1;
    case kNumericValue: {
      total_size += 1 + 8;
      break;
    }
    // string stringValue = 2;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringvalue());
      break;
    }
    // .shift_processor.RangedValue rangedValue = 3;
    case kRangedValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.rangedvalue_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventValue::GetClassData() const { return &_class_data_; }

void EventValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EventValue *>(to)->MergeFrom(
      static_cast<const EventValue &>(from));
}


void EventValue::MergeFrom(const EventValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.EventValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kNumericValue: {
      _internal_set_numericvalue(from._internal_numericvalue());
      break;
    }
    case kStringValue: {
      _internal_set_stringvalue(from._internal_stringvalue());
      break;
    }
    case kRangedValue: {
      _internal_mutable_rangedvalue()->::shift_processor::RangedValue::MergeFrom(from._internal_rangedvalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventValue::CopyFrom(const EventValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.EventValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventValue::IsInitialized() const {
  return true;
}

void EventValue::InternalSwap(EventValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[10]);
}

// ===================================================================

class RangedValue::_Internal {
 public:
};

RangedValue::RangedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:shift_processor.RangedValue)
}
RangedValue::RangedValue(const RangedValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startvalue_, &from.startvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&curve_) -
    reinterpret_cast<char*>(&startvalue_)) + sizeof(curve_));
  // @@protoc_insertion_point(copy_constructor:shift_processor.RangedValue)
}

inline void RangedValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curve_) -
    reinterpret_cast<char*>(&startvalue_)) + sizeof(curve_));
}

RangedValue::~RangedValue() {
  // @@protoc_insertion_point(destructor:shift_processor.RangedValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RangedValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RangedValue::ArenaDtor(void* object) {
  RangedValue* _this = reinterpret_cast< RangedValue* >(object);
  (void)_this;
}
void RangedValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangedValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:shift_processor.RangedValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curve_) -
      reinterpret_cast<char*>(&startvalue_)) + sizeof(curve_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangedValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double startValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          startvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double endValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          endvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double curve = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          curve_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangedValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shift_processor.RangedValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double startValue = 1;
  if (!(this->_internal_startvalue() <= 0 && this->_internal_startvalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_startvalue(), target);
  }

  // double endValue = 2;
  if (!(this->_internal_endvalue() <= 0 && this->_internal_endvalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_endvalue(), target);
  }

  // double curve = 3;
  if (!(this->_internal_curve() <= 0 && this->_internal_curve() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_curve(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shift_processor.RangedValue)
  return target;
}

size_t RangedValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shift_processor.RangedValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double startValue = 1;
  if (!(this->_internal_startvalue() <= 0 && this->_internal_startvalue() >= 0)) {
    total_size += 1 + 8;
  }

  // double endValue = 2;
  if (!(this->_internal_endvalue() <= 0 && this->_internal_endvalue() >= 0)) {
    total_size += 1 + 8;
  }

  // double curve = 3;
  if (!(this->_internal_curve() <= 0 && this->_internal_curve() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangedValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RangedValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangedValue::GetClassData() const { return &_class_data_; }

void RangedValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RangedValue *>(to)->MergeFrom(
      static_cast<const RangedValue &>(from));
}


void RangedValue::MergeFrom(const RangedValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shift_processor.RangedValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_startvalue() <= 0 && from._internal_startvalue() >= 0)) {
    _internal_set_startvalue(from._internal_startvalue());
  }
  if (!(from._internal_endvalue() <= 0 && from._internal_endvalue() >= 0)) {
    _internal_set_endvalue(from._internal_endvalue());
  }
  if (!(from._internal_curve() <= 0 && from._internal_curve() >= 0)) {
    _internal_set_curve(from._internal_curve());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangedValue::CopyFrom(const RangedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shift_processor.RangedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangedValue::IsInitialized() const {
  return true;
}

void RangedValue::InternalSwap(RangedValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangedValue, curve_)
      + sizeof(RangedValue::curve_)
      - PROTOBUF_FIELD_OFFSET(RangedValue, startvalue_)>(
          reinterpret_cast<char*>(&startvalue_),
          reinterpret_cast<char*>(&other->startvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangedValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_note_5fmessage_2eproto_getter, &descriptor_table_note_5fmessage_2eproto_once,
      file_level_metadata_note_5fmessage_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace shift_processor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::shift_processor::ShiftPlayerMessage* Arena::CreateMaybeMessage< ::shift_processor::ShiftPlayerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::ShiftPlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::ShiftPlayerResponse* Arena::CreateMaybeMessage< ::shift_processor::ShiftPlayerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::ShiftPlayerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::EmptyMessage* Arena::CreateMaybeMessage< ::shift_processor::EmptyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::EmptyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::GetStatusData* Arena::CreateMaybeMessage< ::shift_processor::GetStatusData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::GetStatusData >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::SequencePosition* Arena::CreateMaybeMessage< ::shift_processor::SequencePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::SequencePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::SetPlayMode* Arena::CreateMaybeMessage< ::shift_processor::SetPlayMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::SetPlayMode >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::SetSequenceMessage* Arena::CreateMaybeMessage< ::shift_processor::SetSequenceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::SetSequenceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::InstrumentEvents* Arena::CreateMaybeMessage< ::shift_processor::InstrumentEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::InstrumentEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::SequenceEvent_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage< ::shift_processor::SequenceEvent_ValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::SequenceEvent_ValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::SequenceEvent* Arena::CreateMaybeMessage< ::shift_processor::SequenceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::SequenceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::EventValue* Arena::CreateMaybeMessage< ::shift_processor::EventValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::EventValue >(arena);
}
template<> PROTOBUF_NOINLINE ::shift_processor::RangedValue* Arena::CreateMaybeMessage< ::shift_processor::RangedValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shift_processor::RangedValue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
