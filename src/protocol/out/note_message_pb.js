// source: note_message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.shift_processor.EmptyMessage', null, global);
goog.exportSymbol('proto.shift_processor.EventValue', null, global);
goog.exportSymbol('proto.shift_processor.EventValue.ValueCase', null, global);
goog.exportSymbol('proto.shift_processor.GetStatusData', null, global);
goog.exportSymbol('proto.shift_processor.InstrumentEvents', null, global);
goog.exportSymbol('proto.shift_processor.PlayMode', null, global);
goog.exportSymbol('proto.shift_processor.RangedValue', null, global);
goog.exportSymbol('proto.shift_processor.ResponseStatus', null, global);
goog.exportSymbol('proto.shift_processor.SequenceEvent', null, global);
goog.exportSymbol('proto.shift_processor.SequencePosition', null, global);
goog.exportSymbol('proto.shift_processor.SetPlayMode', null, global);
goog.exportSymbol('proto.shift_processor.SetSequenceMessage', null, global);
goog.exportSymbol('proto.shift_processor.ShiftPlayerMessage', null, global);
goog.exportSymbol('proto.shift_processor.ShiftPlayerMessage.MessageCase', null, global);
goog.exportSymbol('proto.shift_processor.ShiftPlayerResponse', null, global);
goog.exportSymbol('proto.shift_processor.ShiftPlayerResponse.DataCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.ShiftPlayerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shift_processor.ShiftPlayerMessage.oneofGroups_);
};
goog.inherits(proto.shift_processor.ShiftPlayerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.ShiftPlayerMessage.displayName = 'proto.shift_processor.ShiftPlayerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.ShiftPlayerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shift_processor.ShiftPlayerResponse.oneofGroups_);
};
goog.inherits(proto.shift_processor.ShiftPlayerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.ShiftPlayerResponse.displayName = 'proto.shift_processor.ShiftPlayerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.EmptyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shift_processor.EmptyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.EmptyMessage.displayName = 'proto.shift_processor.EmptyMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.GetStatusData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shift_processor.GetStatusData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.GetStatusData.displayName = 'proto.shift_processor.GetStatusData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.SequencePosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shift_processor.SequencePosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.SequencePosition.displayName = 'proto.shift_processor.SequencePosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.SetPlayMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shift_processor.SetPlayMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.SetPlayMode.displayName = 'proto.shift_processor.SetPlayMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.SetSequenceMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shift_processor.SetSequenceMessage.repeatedFields_, null);
};
goog.inherits(proto.shift_processor.SetSequenceMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.SetSequenceMessage.displayName = 'proto.shift_processor.SetSequenceMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.InstrumentEvents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shift_processor.InstrumentEvents.repeatedFields_, null);
};
goog.inherits(proto.shift_processor.InstrumentEvents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.InstrumentEvents.displayName = 'proto.shift_processor.InstrumentEvents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.SequenceEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shift_processor.SequenceEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.SequenceEvent.displayName = 'proto.shift_processor.SequenceEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.EventValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.shift_processor.EventValue.oneofGroups_);
};
goog.inherits(proto.shift_processor.EventValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.EventValue.displayName = 'proto.shift_processor.EventValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shift_processor.RangedValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shift_processor.RangedValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.shift_processor.RangedValue.displayName = 'proto.shift_processor.RangedValue';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shift_processor.ShiftPlayerMessage.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.shift_processor.ShiftPlayerMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  SETSEQUENCE: 1,
  SETPLAYMODE: 2,
  GETPLAYERSTATE: 3
};

/**
 * @return {proto.shift_processor.ShiftPlayerMessage.MessageCase}
 */
proto.shift_processor.ShiftPlayerMessage.prototype.getMessageCase = function() {
  return /** @type {proto.shift_processor.ShiftPlayerMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.shift_processor.ShiftPlayerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.ShiftPlayerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.ShiftPlayerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.ShiftPlayerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.ShiftPlayerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    setsequence: (f = msg.getSetsequence()) && proto.shift_processor.SetSequenceMessage.toObject(includeInstance, f),
    setplaymode: (f = msg.getSetplaymode()) && proto.shift_processor.SetPlayMode.toObject(includeInstance, f),
    getplayerstate: (f = msg.getGetplayerstate()) && proto.shift_processor.EmptyMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.ShiftPlayerMessage}
 */
proto.shift_processor.ShiftPlayerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.ShiftPlayerMessage;
  return proto.shift_processor.ShiftPlayerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.ShiftPlayerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.ShiftPlayerMessage}
 */
proto.shift_processor.ShiftPlayerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shift_processor.SetSequenceMessage;
      reader.readMessage(value,proto.shift_processor.SetSequenceMessage.deserializeBinaryFromReader);
      msg.setSetsequence(value);
      break;
    case 2:
      var value = new proto.shift_processor.SetPlayMode;
      reader.readMessage(value,proto.shift_processor.SetPlayMode.deserializeBinaryFromReader);
      msg.setSetplaymode(value);
      break;
    case 3:
      var value = new proto.shift_processor.EmptyMessage;
      reader.readMessage(value,proto.shift_processor.EmptyMessage.deserializeBinaryFromReader);
      msg.setGetplayerstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.ShiftPlayerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.ShiftPlayerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.ShiftPlayerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.ShiftPlayerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetsequence();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.shift_processor.SetSequenceMessage.serializeBinaryToWriter
    );
  }
  f = message.getSetplaymode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.shift_processor.SetPlayMode.serializeBinaryToWriter
    );
  }
  f = message.getGetplayerstate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shift_processor.EmptyMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional SetSequenceMessage setSequence = 1;
 * @return {?proto.shift_processor.SetSequenceMessage}
 */
proto.shift_processor.ShiftPlayerMessage.prototype.getSetsequence = function() {
  return /** @type{?proto.shift_processor.SetSequenceMessage} */ (
    jspb.Message.getWrapperField(this, proto.shift_processor.SetSequenceMessage, 1));
};


/**
 * @param {?proto.shift_processor.SetSequenceMessage|undefined} value
 * @return {!proto.shift_processor.ShiftPlayerMessage} returns this
*/
proto.shift_processor.ShiftPlayerMessage.prototype.setSetsequence = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.shift_processor.ShiftPlayerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shift_processor.ShiftPlayerMessage} returns this
 */
proto.shift_processor.ShiftPlayerMessage.prototype.clearSetsequence = function() {
  return this.setSetsequence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shift_processor.ShiftPlayerMessage.prototype.hasSetsequence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SetPlayMode setPlayMode = 2;
 * @return {?proto.shift_processor.SetPlayMode}
 */
proto.shift_processor.ShiftPlayerMessage.prototype.getSetplaymode = function() {
  return /** @type{?proto.shift_processor.SetPlayMode} */ (
    jspb.Message.getWrapperField(this, proto.shift_processor.SetPlayMode, 2));
};


/**
 * @param {?proto.shift_processor.SetPlayMode|undefined} value
 * @return {!proto.shift_processor.ShiftPlayerMessage} returns this
*/
proto.shift_processor.ShiftPlayerMessage.prototype.setSetplaymode = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.shift_processor.ShiftPlayerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shift_processor.ShiftPlayerMessage} returns this
 */
proto.shift_processor.ShiftPlayerMessage.prototype.clearSetplaymode = function() {
  return this.setSetplaymode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shift_processor.ShiftPlayerMessage.prototype.hasSetplaymode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EmptyMessage getPlayerState = 3;
 * @return {?proto.shift_processor.EmptyMessage}
 */
proto.shift_processor.ShiftPlayerMessage.prototype.getGetplayerstate = function() {
  return /** @type{?proto.shift_processor.EmptyMessage} */ (
    jspb.Message.getWrapperField(this, proto.shift_processor.EmptyMessage, 3));
};


/**
 * @param {?proto.shift_processor.EmptyMessage|undefined} value
 * @return {!proto.shift_processor.ShiftPlayerMessage} returns this
*/
proto.shift_processor.ShiftPlayerMessage.prototype.setGetplayerstate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.shift_processor.ShiftPlayerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shift_processor.ShiftPlayerMessage} returns this
 */
proto.shift_processor.ShiftPlayerMessage.prototype.clearGetplayerstate = function() {
  return this.setGetplayerstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shift_processor.ShiftPlayerMessage.prototype.hasGetplayerstate = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shift_processor.ShiftPlayerResponse.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.shift_processor.ShiftPlayerResponse.DataCase = {
  DATA_NOT_SET: 0,
  NONE: 2,
  GETSTATUSDATA: 3
};

/**
 * @return {proto.shift_processor.ShiftPlayerResponse.DataCase}
 */
proto.shift_processor.ShiftPlayerResponse.prototype.getDataCase = function() {
  return /** @type {proto.shift_processor.ShiftPlayerResponse.DataCase} */(jspb.Message.computeOneofCase(this, proto.shift_processor.ShiftPlayerResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.ShiftPlayerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.ShiftPlayerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.ShiftPlayerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.ShiftPlayerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    none: (f = msg.getNone()) && proto.shift_processor.EmptyMessage.toObject(includeInstance, f),
    getstatusdata: (f = msg.getGetstatusdata()) && proto.shift_processor.GetStatusData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.ShiftPlayerResponse}
 */
proto.shift_processor.ShiftPlayerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.ShiftPlayerResponse;
  return proto.shift_processor.ShiftPlayerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.ShiftPlayerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.ShiftPlayerResponse}
 */
proto.shift_processor.ShiftPlayerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.shift_processor.ResponseStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.shift_processor.EmptyMessage;
      reader.readMessage(value,proto.shift_processor.EmptyMessage.deserializeBinaryFromReader);
      msg.setNone(value);
      break;
    case 3:
      var value = new proto.shift_processor.GetStatusData;
      reader.readMessage(value,proto.shift_processor.GetStatusData.deserializeBinaryFromReader);
      msg.setGetstatusdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.ShiftPlayerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.ShiftPlayerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.ShiftPlayerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.ShiftPlayerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNone();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.shift_processor.EmptyMessage.serializeBinaryToWriter
    );
  }
  f = message.getGetstatusdata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shift_processor.GetStatusData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseStatus status = 1;
 * @return {!proto.shift_processor.ResponseStatus}
 */
proto.shift_processor.ShiftPlayerResponse.prototype.getStatus = function() {
  return /** @type {!proto.shift_processor.ResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.shift_processor.ResponseStatus} value
 * @return {!proto.shift_processor.ShiftPlayerResponse} returns this
 */
proto.shift_processor.ShiftPlayerResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EmptyMessage none = 2;
 * @return {?proto.shift_processor.EmptyMessage}
 */
proto.shift_processor.ShiftPlayerResponse.prototype.getNone = function() {
  return /** @type{?proto.shift_processor.EmptyMessage} */ (
    jspb.Message.getWrapperField(this, proto.shift_processor.EmptyMessage, 2));
};


/**
 * @param {?proto.shift_processor.EmptyMessage|undefined} value
 * @return {!proto.shift_processor.ShiftPlayerResponse} returns this
*/
proto.shift_processor.ShiftPlayerResponse.prototype.setNone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.shift_processor.ShiftPlayerResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shift_processor.ShiftPlayerResponse} returns this
 */
proto.shift_processor.ShiftPlayerResponse.prototype.clearNone = function() {
  return this.setNone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shift_processor.ShiftPlayerResponse.prototype.hasNone = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetStatusData getStatusData = 3;
 * @return {?proto.shift_processor.GetStatusData}
 */
proto.shift_processor.ShiftPlayerResponse.prototype.getGetstatusdata = function() {
  return /** @type{?proto.shift_processor.GetStatusData} */ (
    jspb.Message.getWrapperField(this, proto.shift_processor.GetStatusData, 3));
};


/**
 * @param {?proto.shift_processor.GetStatusData|undefined} value
 * @return {!proto.shift_processor.ShiftPlayerResponse} returns this
*/
proto.shift_processor.ShiftPlayerResponse.prototype.setGetstatusdata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.shift_processor.ShiftPlayerResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shift_processor.ShiftPlayerResponse} returns this
 */
proto.shift_processor.ShiftPlayerResponse.prototype.clearGetstatusdata = function() {
  return this.setGetstatusdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shift_processor.ShiftPlayerResponse.prototype.hasGetstatusdata = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.EmptyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.EmptyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.EmptyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.EmptyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.EmptyMessage}
 */
proto.shift_processor.EmptyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.EmptyMessage;
  return proto.shift_processor.EmptyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.EmptyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.EmptyMessage}
 */
proto.shift_processor.EmptyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.EmptyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.EmptyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.EmptyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.EmptyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.GetStatusData.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.GetStatusData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.GetStatusData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.GetStatusData.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentposition: (f = msg.getCurrentposition()) && proto.shift_processor.SequencePosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.GetStatusData}
 */
proto.shift_processor.GetStatusData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.GetStatusData;
  return proto.shift_processor.GetStatusData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.GetStatusData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.GetStatusData}
 */
proto.shift_processor.GetStatusData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shift_processor.SequencePosition;
      reader.readMessage(value,proto.shift_processor.SequencePosition.deserializeBinaryFromReader);
      msg.setCurrentposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.GetStatusData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.GetStatusData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.GetStatusData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.GetStatusData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentposition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.shift_processor.SequencePosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional SequencePosition currentPosition = 1;
 * @return {?proto.shift_processor.SequencePosition}
 */
proto.shift_processor.GetStatusData.prototype.getCurrentposition = function() {
  return /** @type{?proto.shift_processor.SequencePosition} */ (
    jspb.Message.getWrapperField(this, proto.shift_processor.SequencePosition, 1));
};


/**
 * @param {?proto.shift_processor.SequencePosition|undefined} value
 * @return {!proto.shift_processor.GetStatusData} returns this
*/
proto.shift_processor.GetStatusData.prototype.setCurrentposition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shift_processor.GetStatusData} returns this
 */
proto.shift_processor.GetStatusData.prototype.clearCurrentposition = function() {
  return this.setCurrentposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shift_processor.GetStatusData.prototype.hasCurrentposition = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.SequencePosition.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.SequencePosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.SequencePosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.SequencePosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    endtimems: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    currenttimems: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.SequencePosition}
 */
proto.shift_processor.SequencePosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.SequencePosition;
  return proto.shift_processor.SequencePosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.SequencePosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.SequencePosition}
 */
proto.shift_processor.SequencePosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndtimems(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrenttimems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.SequencePosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.SequencePosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.SequencePosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.SequencePosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndtimems();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCurrenttimems();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double endTimeMs = 1;
 * @return {number}
 */
proto.shift_processor.SequencePosition.prototype.getEndtimems = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shift_processor.SequencePosition} returns this
 */
proto.shift_processor.SequencePosition.prototype.setEndtimems = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double currentTimeMs = 2;
 * @return {number}
 */
proto.shift_processor.SequencePosition.prototype.getCurrenttimems = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shift_processor.SequencePosition} returns this
 */
proto.shift_processor.SequencePosition.prototype.setCurrenttimems = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.SetPlayMode.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.SetPlayMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.SetPlayMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.SetPlayMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    playmode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.SetPlayMode}
 */
proto.shift_processor.SetPlayMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.SetPlayMode;
  return proto.shift_processor.SetPlayMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.SetPlayMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.SetPlayMode}
 */
proto.shift_processor.SetPlayMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.shift_processor.PlayMode} */ (reader.readEnum());
      msg.setPlaymode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.SetPlayMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.SetPlayMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.SetPlayMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.SetPlayMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlaymode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional PlayMode playMode = 1;
 * @return {!proto.shift_processor.PlayMode}
 */
proto.shift_processor.SetPlayMode.prototype.getPlaymode = function() {
  return /** @type {!proto.shift_processor.PlayMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.shift_processor.PlayMode} value
 * @return {!proto.shift_processor.SetPlayMode} returns this
 */
proto.shift_processor.SetPlayMode.prototype.setPlaymode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shift_processor.SetSequenceMessage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.SetSequenceMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.SetSequenceMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.SetSequenceMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.SetSequenceMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequencelength: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    instrumenteventsList: jspb.Message.toObjectList(msg.getInstrumenteventsList(),
    proto.shift_processor.InstrumentEvents.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.SetSequenceMessage}
 */
proto.shift_processor.SetSequenceMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.SetSequenceMessage;
  return proto.shift_processor.SetSequenceMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.SetSequenceMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.SetSequenceMessage}
 */
proto.shift_processor.SetSequenceMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSequencelength(value);
      break;
    case 2:
      var value = new proto.shift_processor.InstrumentEvents;
      reader.readMessage(value,proto.shift_processor.InstrumentEvents.deserializeBinaryFromReader);
      msg.addInstrumentevents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.SetSequenceMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.SetSequenceMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.SetSequenceMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.SetSequenceMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequencelength();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getInstrumenteventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.shift_processor.InstrumentEvents.serializeBinaryToWriter
    );
  }
};


/**
 * optional double sequenceLength = 1;
 * @return {number}
 */
proto.shift_processor.SetSequenceMessage.prototype.getSequencelength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shift_processor.SetSequenceMessage} returns this
 */
proto.shift_processor.SetSequenceMessage.prototype.setSequencelength = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * repeated InstrumentEvents instrumentEvents = 2;
 * @return {!Array<!proto.shift_processor.InstrumentEvents>}
 */
proto.shift_processor.SetSequenceMessage.prototype.getInstrumenteventsList = function() {
  return /** @type{!Array<!proto.shift_processor.InstrumentEvents>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shift_processor.InstrumentEvents, 2));
};


/**
 * @param {!Array<!proto.shift_processor.InstrumentEvents>} value
 * @return {!proto.shift_processor.SetSequenceMessage} returns this
*/
proto.shift_processor.SetSequenceMessage.prototype.setInstrumenteventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.shift_processor.InstrumentEvents=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shift_processor.InstrumentEvents}
 */
proto.shift_processor.SetSequenceMessage.prototype.addInstrumentevents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shift_processor.InstrumentEvents, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shift_processor.SetSequenceMessage} returns this
 */
proto.shift_processor.SetSequenceMessage.prototype.clearInstrumenteventsList = function() {
  return this.setInstrumenteventsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shift_processor.InstrumentEvents.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.InstrumentEvents.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.InstrumentEvents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.InstrumentEvents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.InstrumentEvents.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrument: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.shift_processor.SequenceEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.InstrumentEvents}
 */
proto.shift_processor.InstrumentEvents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.InstrumentEvents;
  return proto.shift_processor.InstrumentEvents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.InstrumentEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.InstrumentEvents}
 */
proto.shift_processor.InstrumentEvents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstrument(value);
      break;
    case 2:
      var value = new proto.shift_processor.SequenceEvent;
      reader.readMessage(value,proto.shift_processor.SequenceEvent.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.InstrumentEvents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.InstrumentEvents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.InstrumentEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.InstrumentEvents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrument();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.shift_processor.SequenceEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional string instrument = 1;
 * @return {string}
 */
proto.shift_processor.InstrumentEvents.prototype.getInstrument = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.shift_processor.InstrumentEvents} returns this
 */
proto.shift_processor.InstrumentEvents.prototype.setInstrument = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated SequenceEvent events = 2;
 * @return {!Array<!proto.shift_processor.SequenceEvent>}
 */
proto.shift_processor.InstrumentEvents.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.shift_processor.SequenceEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shift_processor.SequenceEvent, 2));
};


/**
 * @param {!Array<!proto.shift_processor.SequenceEvent>} value
 * @return {!proto.shift_processor.InstrumentEvents} returns this
*/
proto.shift_processor.InstrumentEvents.prototype.setEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.shift_processor.SequenceEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shift_processor.SequenceEvent}
 */
proto.shift_processor.InstrumentEvents.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shift_processor.SequenceEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.shift_processor.InstrumentEvents} returns this
 */
proto.shift_processor.InstrumentEvents.prototype.clearEventsList = function() {
  return this.setEventsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.SequenceEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.SequenceEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.SequenceEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.SequenceEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventtime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, proto.shift_processor.EventValue.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.SequenceEvent}
 */
proto.shift_processor.SequenceEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.SequenceEvent;
  return proto.shift_processor.SequenceEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.SequenceEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.SequenceEvent}
 */
proto.shift_processor.SequenceEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEventtime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDuration(value);
      break;
    case 3:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.shift_processor.EventValue.deserializeBinaryFromReader, "", new proto.shift_processor.EventValue());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.SequenceEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.SequenceEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.SequenceEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.SequenceEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventtime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.shift_processor.EventValue.serializeBinaryToWriter);
  }
};


/**
 * optional double eventTime = 1;
 * @return {number}
 */
proto.shift_processor.SequenceEvent.prototype.getEventtime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shift_processor.SequenceEvent} returns this
 */
proto.shift_processor.SequenceEvent.prototype.setEventtime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double duration = 2;
 * @return {number}
 */
proto.shift_processor.SequenceEvent.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shift_processor.SequenceEvent} returns this
 */
proto.shift_processor.SequenceEvent.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * map<string, EventValue> values = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.shift_processor.EventValue>}
 */
proto.shift_processor.SequenceEvent.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.shift_processor.EventValue>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.shift_processor.EventValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.shift_processor.SequenceEvent} returns this
 */
proto.shift_processor.SequenceEvent.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.shift_processor.EventValue.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.shift_processor.EventValue.ValueCase = {
  VALUE_NOT_SET: 0,
  NUMERICVALUE: 1,
  STRINGVALUE: 2,
  RANGEDVALUE: 3
};

/**
 * @return {proto.shift_processor.EventValue.ValueCase}
 */
proto.shift_processor.EventValue.prototype.getValueCase = function() {
  return /** @type {proto.shift_processor.EventValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.shift_processor.EventValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.EventValue.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.EventValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.EventValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.EventValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    numericvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    stringvalue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rangedvalue: (f = msg.getRangedvalue()) && proto.shift_processor.RangedValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.EventValue}
 */
proto.shift_processor.EventValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.EventValue;
  return proto.shift_processor.EventValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.EventValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.EventValue}
 */
proto.shift_processor.EventValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumericvalue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 3:
      var value = new proto.shift_processor.RangedValue;
      reader.readMessage(value,proto.shift_processor.RangedValue.deserializeBinaryFromReader);
      msg.setRangedvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.EventValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.EventValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.EventValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.EventValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRangedvalue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shift_processor.RangedValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional double numericValue = 1;
 * @return {number}
 */
proto.shift_processor.EventValue.prototype.getNumericvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shift_processor.EventValue} returns this
 */
proto.shift_processor.EventValue.prototype.setNumericvalue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.shift_processor.EventValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.shift_processor.EventValue} returns this
 */
proto.shift_processor.EventValue.prototype.clearNumericvalue = function() {
  return jspb.Message.setOneofField(this, 1, proto.shift_processor.EventValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shift_processor.EventValue.prototype.hasNumericvalue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string stringValue = 2;
 * @return {string}
 */
proto.shift_processor.EventValue.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.shift_processor.EventValue} returns this
 */
proto.shift_processor.EventValue.prototype.setStringvalue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.shift_processor.EventValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.shift_processor.EventValue} returns this
 */
proto.shift_processor.EventValue.prototype.clearStringvalue = function() {
  return jspb.Message.setOneofField(this, 2, proto.shift_processor.EventValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shift_processor.EventValue.prototype.hasStringvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RangedValue rangedValue = 3;
 * @return {?proto.shift_processor.RangedValue}
 */
proto.shift_processor.EventValue.prototype.getRangedvalue = function() {
  return /** @type{?proto.shift_processor.RangedValue} */ (
    jspb.Message.getWrapperField(this, proto.shift_processor.RangedValue, 3));
};


/**
 * @param {?proto.shift_processor.RangedValue|undefined} value
 * @return {!proto.shift_processor.EventValue} returns this
*/
proto.shift_processor.EventValue.prototype.setRangedvalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.shift_processor.EventValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.shift_processor.EventValue} returns this
 */
proto.shift_processor.EventValue.prototype.clearRangedvalue = function() {
  return this.setRangedvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.shift_processor.EventValue.prototype.hasRangedvalue = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shift_processor.RangedValue.prototype.toObject = function(opt_includeInstance) {
  return proto.shift_processor.RangedValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shift_processor.RangedValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.RangedValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    startvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    endvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    curve: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shift_processor.RangedValue}
 */
proto.shift_processor.RangedValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shift_processor.RangedValue;
  return proto.shift_processor.RangedValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shift_processor.RangedValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shift_processor.RangedValue}
 */
proto.shift_processor.RangedValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartvalue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndvalue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurve(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shift_processor.RangedValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shift_processor.RangedValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shift_processor.RangedValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shift_processor.RangedValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getEndvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getCurve();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double startValue = 1;
 * @return {number}
 */
proto.shift_processor.RangedValue.prototype.getStartvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shift_processor.RangedValue} returns this
 */
proto.shift_processor.RangedValue.prototype.setStartvalue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double endValue = 2;
 * @return {number}
 */
proto.shift_processor.RangedValue.prototype.getEndvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shift_processor.RangedValue} returns this
 */
proto.shift_processor.RangedValue.prototype.setEndvalue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double curve = 3;
 * @return {number}
 */
proto.shift_processor.RangedValue.prototype.getCurve = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.shift_processor.RangedValue} returns this
 */
proto.shift_processor.RangedValue.prototype.setCurve = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.shift_processor.ResponseStatus = {
  OK: 0,
  GENERALERROR: 1,
  PARSINGERROR: 2,
  INVALIDINPUT: 3
};

/**
 * @enum {number}
 */
proto.shift_processor.PlayMode = {
  PLAY: 0,
  STOP: 1,
  PAUSE: 2
};

goog.object.extend(exports, proto.shift_processor);
